package t8_distributed_system;

public class Topic2 {
    /*
        微服务 基本组件
          1. 为什么要有"微服务"？
            （1）微服务的优点
                1. 易于维护
                2. 弹性（可以很好的处理服务不可用和降级）
                3. 可伸缩（只需对存在性能瓶颈的微服务进行扩展）
                4. 易于开发，简化部署（单体服务只改了一行代码就要重新部署，风险大；导致部署频率变低，这又导致不同版本差异大，风险变大）
                5. 与团队组织结构相匹配（康威定律）
                6. 可组合（针对不同平台，web，原生应用，移动web，穿戴设备）
                7. 可替代性强（可以轻易的重写或删除应用）
                8. 技术异构性（用合适的，新的）

            （2）微服务的缺点
                 1.分布式复杂性(业务上，技术上)
                 2.破坏了系统的一致性

                 最终一致性
                    CAP
                        Consistency:一致性，多个操作都能生效；
                        Availability：可用性，客户请求能够在服务端正确被响应；
                        Partition tolerance：分区容忍性，分区中部分节点挂了，不会影响整体服务可用性。

                        分布式系统必须P，所以对于某一操作，系统就要在C和A中进行选择。

                    BASE
                        BASE理论是对CAP理论的进一步扩充
                        Basically Available：基本可用（不保证100%可用性，保证3个9，或者4个9）
                        Soft State：软状态（允许系统中存在中间状态）
                        Eventually Consistency：弱一致性、最终一致性（多个操作状态最终达到一致）

                 3.运维复杂性
                 4.测试复杂性

            （3）分布式系统的发展：
                SOA（面向服务的架构） --->  微服务(Netflix：Spring Cloud)  --->  Service Mesh（服务网格）

                微服务的概念更重要的是业务的粒度，Spring Cloud只是实现微服务架构的技术手段（也可以说是一种生态），
                同样dubbo也拥有同样的生态，网上有很多关于这两种生态的比较。

                微服务是一个比较大的话题，它一方面涉及具体的业务的划分（具体可以学习"领域驱动设计"），另一方面有涉及分布式系统的具体技术；这两者其实都很重要；
                但前者需要我们在实际项目中积累更多的经验，后者我们可以通过搭建简单的系统得到"管中窥豹"的效果；总之更多的，我认为还是要结合场景来分析。

          2. 微服务有哪些组件？
                （1）服务注册与发现
                （2）服务框架（RPC框架）
                    RPC调用的方式：RPC、HTTP
                    序列化方式
                    RPC-> 基于TCP连接，短链接、长连接，分别适用于哪些场景？

                （3）服务网关
                    Zuul，权限认证（鉴权方面的安全性）、限流、软路由（灰度发布）
                （4）配置中心

                （5）服务追踪

                （6）限流（限制单位时间内的请求数）
                    熔断（服务健康性不好的时候，响应不可用）
                    降级（响应不可用，比如直接返回"服务不可用"）
                    隔离（使不同类型的服务之间互不影响）
                        Hystrix

                dubbo
                Spring Cloud

          3. 分布式事务：
                 二阶段提交（2PC）：
                 柔性补偿事务（TCC，Try-Confirm-Cancel）：
                 本地消息表（异步确保）：
                 MQ事务消息：

          4. P2P理财系统的服务划分：
                产品服务
                            维护各种理财产品，包括订单；以及周边的东西
                撮合服务
                            1000个人借了10w（借贷服务）（标的），包装出去了各种理财产品，定期30天，定期60天，定期90天
                            （1000元，500元，1万元，统一的变成100元标细胞）                        （1000元，10w元）
                                "标的"和"理财产品"进行匹配。

                账务服务
                            记账，对账，保证不出现资损；
                出入金服务
                            对接银行系统

                营销服务（红包、优惠券）
                            维护开发各种红包、优惠券，统计运营成本等


                    我们看一个具体的理财产品下单流程：
                        一个产品1000w左右，每单1000起投，上限几万元，一般也就几千单，时间分布一般比较均匀，没有抢购现象

                        下单：
                        （1）完成校验后，同一事务内，生成初始订单（Order表，初始状态0），扣减理财产品余额（Product表，利用CAS防止超卖）；
                            如果用户勾选了优惠券或者红包，则发送MQ消息通知"营销服务"冻结票券，
                            同时Listener接收"营销服务"冻结结果的MQ消息，更新订单信息；
                        （2）Listener监听MQ支付消息（"出入金服务"发出），
                                更改订单（Order表）状态为已支付（1），调用"撮合服务"撮合接口，并告知订单id，金额等信息，调用"营销服务"消费冻结的票券；
                                或者更新状态为失败（2）并对产品表进行修改，调用"营销服务"释放票券；
                        （3）Listener监听MQ撮合消息（"撮合服务"发出），并更新订单状态为收益中（3）

                        收益中：
                        （4）定时任务，每天定时更新订单"名义收益"（线程池）

                        赎回：
                        （5）订单到期当天，定时任务，调用"撮合服务"债转接口发起债转（线程池），更新订单状态为退出中（4）
                        （6）Listener监听MQ债转消息（"撮合服务"发出），债转成功，调用"出入金服务"出金接口
                        （7）Listener监听MQ打款消息（"出入金服务"发出），更新订单状态为已退出（5），短信、微信通知客户


    */
}
